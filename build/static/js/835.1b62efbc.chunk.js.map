{"version":3,"file":"static/js/835.1b62efbc.chunk.js","mappings":"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","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/mdurl/encode.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/style-to-object/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/unist-builder/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/traverse.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/wrap.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef {Array<Node> | string} ChildrenOrValue\n *   List to use as `children` or value to use as `value`.\n *\n * @typedef {Record<string, unknown>} Props\n *   Other fields to add to the node.\n */\n\n/**\n * Build a node.\n *\n * @param type\n *   Node type.\n * @param props\n *   Fields assigned to node.\n * @param value\n *   Children of node or value of `node` (cast to string).\n * @returns\n *   Built node.\n */\nexport const u =\n  /**\n   * @type {(\n   *   (<T extends string>(type: T) => {type: T}) &\n   *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &\n   *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &\n   *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &\n   *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &\n   *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)\n   * )}\n   */\n  (\n    /**\n     * @param {string} type\n     * @param {Props | ChildrenOrValue | null | undefined} [props]\n     * @param {ChildrenOrValue | null | undefined} [value]\n     * @returns {Node}\n     */\n    function (type, props, value) {\n      /** @type {Node} */\n      const node = {type: String(type)}\n\n      if (\n        (value === undefined || value === null) &&\n        (typeof props === 'string' || Array.isArray(props))\n      ) {\n        value = props\n      } else {\n        Object.assign(node, props)\n      }\n\n      if (Array.isArray(value)) {\n        // @ts-expect-error: create a parent.\n        node.children = value\n      } else if (value !== undefined && value !== null) {\n        // @ts-expect-error: create a literal.\n        node.value = String(value)\n      }\n\n      return node\n    }\n  )\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array.<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array.<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array.<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array.<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const footnoteOrder = h.footnoteOrder\n  const identifier = String(node.identifier)\n  const index = footnoteOrder.indexOf(identifier)\n  const marker = String(\n    index === -1 ? footnoteOrder.push(identifier) : index + 1\n  )\n\n  return h(\n    node,\n    'a',\n    {\n      href: '#fn' + marker,\n      className: ['footnote-ref'],\n      id: 'fnref' + marker,\n      role: 'doc-noteref'\n    },\n    [h(node.position, 'sup', [u('text', marker)])]\n  )\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array.<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array.<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n  footnoteOrder.push(identifier)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalize(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalize(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalize(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalize(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array.<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    let pos = node.align ? align.length : row.length\n    /** @type {Array.<Content>} */\n    const out = []\n\n    while (pos--) {\n      const cell = row[pos]\n      out[pos] = h(cell, name, {align: align[pos]}, cell ? all(h, cell) : [])\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(\n    node,\n    u('text', String(node.value).replace(/[ \\t]*(\\r?\\n|\\r)[ \\t]*/g, '$1'))\n  )\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Object.<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array.<string>} */\n  h.footnoteOrder = []\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('./index.js').H} H\n */\n\nimport {thematicBreak} from './handlers/thematic-break.js'\nimport {list} from './handlers/list.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let index = -1\n  /** @type {Array.<ListItem>} */\n  const listItems = []\n\n  while (++index < footnoteOrder.length) {\n    const def = footnoteById[footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const marker = String(index + 1)\n    const content = [...def.children]\n    /** @type {Link} */\n    const backReference = {\n      type: 'link',\n      url: '#fnref' + marker,\n      data: {hProperties: {className: ['footnote-back'], role: 'doc-backlink'}},\n      children: [{type: 'text', value: '↩'}]\n    }\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'paragraph') {\n      tail.children.push(backReference)\n    } else {\n      // @ts-expect-error Indeed, link directly added in block content.\n      // Which we do because that way at least the handlers will be called\n      // for the other HTML we’re generating (as markdown).\n      content.push(backReference)\n    }\n\n    listItems.push({\n      type: 'listItem',\n      data: {hProperties: {id: 'fn' + marker, role: 'doc-endnote'}},\n      children: content,\n      position: def.position\n    })\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return h(\n    null,\n    'section',\n    {className: ['footnotes'], role: 'doc-endnotes'},\n    wrap(\n      [\n        thematicBreak(h),\n        list(h, {type: 'list', ordered: true, children: listItems})\n      ],\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new hast tree\n * (bridge-mode).\n * Without destination, returns the hast tree: further plugins run on that tree\n * (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map((d) => String(d))\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [plugins=[]] **deprecated**: use `remarkPlugins` instead\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {uriTransformer} from './uri-transformer.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    // TODO: deprecate `plugins` in v8.0.0.\n    .use(options.remarkPlugins || options.plugins || [])\n    .use(remarkRehype, {allowDangerousHtml: true})\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.defaultProps = {transformLinkUri: uriTransformer}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","encodeCache","encode","string","exclude","keepEscaped","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","toUpperCase","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","b","d","e","f","g","h","k","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","z","A","B","C","D","E","F","G","H","I","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","parse","require","iterator","output","hasIterator","len","stringifyPosition","point","index","VFileMessage","_Error","_inherits","_super","_createSuper","place","origin","_this","_classCallCheck","parts","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","_createClass","_wrapNativeSuper","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","_toConsumableArray","includes","get","set","assertNonEmpty","assertPart","stem","encoding","part","bail","getPrototypeOf","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","apply","Promise","then","_len4","_key4","concat","wrap","use","middelware","unified","base","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","_attachers$freezeInde","_toArray","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","_value","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","sliceChunks","_point","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","_combined$key","_combined$key2","remarkParse","props","convert","castFactory","typeFactory","anyFactory","propsFactory","tests","checks","_checks$index","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","unknown","augment","handlers","passThrough","returnNode","unknownHandler","_objectSpread","nodes","loose","properties","className","footnoteReference","footnoteOrder","id","role","revert","subtype","suffix","contents","listItemLoose","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","listLoose","disabled","child","root","table","rows","align","row","out","cell","toml","ignore","yaml","footnoteDefinition","allowDangerousHtml","definitions","hName","hProperties","hChildren","ctx","generated","toHast","foot","listItems","backReference","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","pow","types","DefinedInfo","_Info","mask","mark","_assertThisInitialized","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inert","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","_parent$children","unwrapDisallowed","protocols","thing","valid","dash","cap","kebab","camelcase","hastToReact","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","transformLinkUri","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","_unused","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","rehypePlugins","hastNode","defaultProps","uri","first","colon","propTypes","PropTypes"],"sourceRoot":""}