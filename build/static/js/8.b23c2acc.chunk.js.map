{"version":3,"sources":["components/Header.jsx","components/Education.jsx"],"names":["Header","props","title","className","Education","theme","useContext","ThemeContext","header","useState","data","setData","width","setWidth","setMode","useEffect","fetch","endpoints","education","method","then","res","json","catch","err","window","innerWidth","style","useReadMore","items","cardHeight","slideShow","slideItemDuration","slideShowType","autoPlay","primary","accentColor","secondary","education_card","cardBgColor","chronoTheme","cardForeColor","titleColor","map","icon","src","alt","borderRadius","height"],"mappings":"8IAAA,8BAaeA,UATf,SAAgBC,GACd,IAAQC,EAAUD,EAAVC,MACR,OAAO,qBAAKC,UAAU,SAAQ,SAAED,GAClC,C,gJC2FeE,UAvFf,SAAmBH,GACjB,IAAMI,EAAQC,qBAAWC,KACjBC,EAAWP,EAAXO,OACR,EAAwBC,mBAAS,MAAK,mBAA/BC,EAAI,KAAEC,EAAO,KACpB,EAA0BF,mBAAS,QAAO,mBAAnCG,EAAK,KAAEC,EAAQ,KACtB,EAAwBJ,mBAAS,wBAAuB,mBAA3CK,GAAF,KAAS,MAyBpB,OAvBAC,qBAAU,WAAO,IAAD,YACdC,MAAMC,IAAUC,UAAW,CACzBC,OAAQ,QAEPC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACC,GAAG,OAAKV,EAAQU,EAAI,IAC1BE,OAAM,SAACC,GAAG,OAAKA,CAAG,KAEX,QAAN,EAAAC,cAAM,aAAN,EAAQC,YAAa,KACvBZ,EAAQ,aAGA,QAAN,EAAAW,cAAM,aAAN,EAAQC,YAAa,MAER,QAAN,EAAAD,cAAM,aAAN,EAAQC,aAAc,MAAa,QAAN,EAAAD,cAAM,aAAN,EAAQC,YAAa,IAD3Db,EAAS,SAGM,QAAN,EAAAY,cAAM,aAAN,EAAQC,aAAc,MAAa,QAAN,EAAAD,cAAM,aAAN,EAAQC,YAAa,KAC3Db,EAAS,QAETA,EAAS,OAEb,GAAG,IAGD,qCACE,cAAC,UAAM,CAACX,MAAOM,IACdE,EACC,cAAC,IAAI,UACH,qBAAKiB,MAAO,CAAEf,SAAST,UAAU,4BAA2B,SAC1D,cAAC,IAAS,UACR,cAAC,IAEC,CACAyB,aAAa,EACbC,MAAOnB,EAAKQ,UACZY,WAAY,IAEZC,WAAS,EACTC,kBAAmB,IACnBC,cAAc,WACdC,UAAQ,EACR7B,MAAO,CACL8B,QAAS9B,EAAM+B,YACfC,UAAWhC,EAAMiC,eACjBC,YAAalC,EAAMmC,YAAYD,YAC/BE,cAAepC,EAAMmC,YAAYC,cACjCC,WAAYrC,EAAMmC,YAAYE,YAC9B,SAEF,qBAAKvC,UAAU,eAAc,SAC1BO,EAAKQ,UAAUyB,KAAI,SAACzB,GAAS,OAC5BA,EAAU0B,KACR,qBAEEC,IAAK3B,EAAU0B,KAAKC,IACpBC,IAAK5B,EAAU0B,KAAKE,IACpBnB,MAAO,CACLoB,aAAc,MACdnC,MAAO,OACPoC,OAAQ,SANL9B,EAAU0B,KAAKC,KASpB,IAAI,cAQpB,cAAC,UAAe,MAIxB,C","file":"static/js/8.b23c2acc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.css';\n\nfunction Header(props) {\n  const { title } = props;\n  return <div className=\"header\">{title}</div>;\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { Chrono } from 'react-chrono';\nimport { Container } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport Fade from 'react-reveal';\nimport { ThemeContext } from 'styled-components';\nimport endpoints from '../constants/endpoints';\nimport Header from './Header';\nimport FallbackSpinner from './FallbackSpinner';\nimport '../css/education.css';\n\nfunction Education(props) {\n  const theme = useContext(ThemeContext);\n  const { header } = props;\n  const [data, setData] = useState(null);\n  const [width, setWidth] = useState('50vw');\n  const [mode, setMode] = useState('VERTICAL_ALTERNATING');\n\n  useEffect(() => {\n    fetch(endpoints.education, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((res) => setData(res))\n      .catch((err) => err);\n\n    if (window?.innerWidth < 576) {\n      setMode('VERTICAL');\n    }\n\n    if (window?.innerWidth < 576) {\n      setWidth('90vw');\n    } else if (window?.innerWidth >= 576 && window?.innerWidth < 768) {\n      setWidth('90vw');\n    } else if (window?.innerWidth >= 768 && window?.innerWidth < 1024) {\n      setWidth('75vw');\n    } else {\n      setWidth('50vw');\n    }\n  }, []);\n\n  return (\n    <>\n      <Header title={header} />\n      {data ? (\n        <Fade>\n          <div style={{ width }} className='section-content-container'>\n            <Container>\n              <Chrono\n                // hideControls\n                // allowDynamicUpdate\n                useReadMore={false}\n                items={data.education}\n                cardHeight={200}\n                // mode={mode}\n                slideShow\n                slideItemDuration={2000}\n                slideShowType='slide_in'\n                autoPlay\n                theme={{\n                  primary: theme.accentColor,\n                  secondary: theme.education_card,\n                  cardBgColor: theme.chronoTheme.cardBgColor,\n                  cardForeColor: theme.chronoTheme.cardForeColor,\n                  titleColor: theme.chronoTheme.titleColor,\n                }}\n              >\n                <div className='chrono-icons'>\n                  {data.education.map((education) =>\n                    education.icon ? (\n                      <img\n                        key={education.icon.src}\n                        src={education.icon.src}\n                        alt={education.icon.alt}\n                        style={{\n                          borderRadius: '50%',\n                          width: '90px',\n                          height: '90px',\n                        }}\n                      />\n                    ) : null,\n                  )}\n                </div>\n              </Chrono>\n            </Container>\n          </div>\n        </Fade>\n      ) : (\n        <FallbackSpinner />\n      )}\n    </>\n  );\n}\n\nEducation.propTypes = {\n  header: PropTypes.string.isRequired,\n};\n\nexport default Education;\n"],"sourceRoot":""}