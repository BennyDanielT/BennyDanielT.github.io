{"version":3,"sources":["components/Header.jsx","components/Education.jsx"],"names":["Header","props","title","className","Education","theme","useContext","ThemeContext","header","useState","data","setData","width","setWidth","setMode","useEffect","fetch","endpoints","education","method","then","res","json","catch","err","window","innerWidth","style","useReadMore","items","cardHeight","slideShow","slideItemDuration","slideShowType","autoPlay","primary","accentColor","secondary","education_card","cardBgColor","chronoTheme","cardForeColor","titleColor","map","icon","src","alt","borderRadius","height"],"mappings":"yHAAA,8BAaeA,UATf,SAAgBC,GACd,IAAQC,EAAUD,EAAVC,MACR,OAAO,qBAAKC,UAAU,SAAQ,SAAED,GAClC,C,iJC8FeE,UA1Ff,SAAmBH,GACjB,IAAMI,EAAQC,qBAAWC,KACjBC,EAAWP,EAAXO,OACR,EAAwBC,mBAAS,MAAK,mBAA/BC,EAAI,KAAEC,EAAO,KACpB,EAA0BF,mBAAS,QAAO,mBAAnCG,EAAK,KAAEC,EAAQ,KACtB,EAAwBJ,mBAAS,wBAAuB,mBAA3CK,GAAF,KAAS,MAyBpB,OAvBAC,qBAAU,WAAO,IAAD,YACdC,MAAMC,IAAUC,UAAW,CACzBC,OAAQ,QAEPC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACC,GAAG,OAAKV,EAAQU,EAAI,IAC1BE,OAAM,SAACC,GAAG,OAAKA,CAAG,KAEX,QAAN,EAAAC,cAAM,aAAN,EAAQC,YAAa,KACvBZ,EAAQ,aAGA,QAAN,EAAAW,cAAM,aAAN,EAAQC,YAAa,MAER,QAAN,EAAAD,cAAM,aAAN,EAAQC,aAAc,MAAa,QAAN,EAAAD,cAAM,aAAN,EAAQC,YAAa,IAD3Db,EAAS,SAGM,QAAN,EAAAY,cAAM,aAAN,EAAQC,aAAc,MAAa,QAAN,EAAAD,cAAM,aAAN,EAAQC,YAAa,KAC3Db,EAAS,QAETA,EAAS,OAEb,GAAG,IAGD,qCACE,cAAC,UAAM,CAACX,MAAOM,IACdE,EACC,cAAC,IAAI,UACH,qBAAKP,UAAU,qBAAoB,SACjC,qBAAKwB,MAAO,CAAEf,SAAST,UAAU,4BAA2B,SAC1D,cAAC,IAAS,UACR,cAAC,IAEC,CACAyB,aAAa,EACbC,MAAOnB,EAAKQ,UACZY,WAAY,IAEZC,WAAS,EACTC,kBAAmB,IACnBC,cAAc,WACdC,UAAQ,EACR7B,MAAO,CACL8B,QAAS9B,EAAM+B,YACfC,UAAWhC,EAAMiC,eACjBC,YAAalC,EAAMmC,YAAYD,YAC/BE,cAAepC,EAAMmC,YAAYC,cACjCC,WAAYrC,EAAMmC,YAAYE,YAC9B,SAEF,qBAAKvC,UAAU,eAAc,SAC1BO,EAAKQ,UAAUyB,KAAI,SAACzB,GAAS,OAC5BA,EAAU0B,KAEN,qBACEzC,UAAU,WACV0C,IAAK3B,EAAU0B,KAAKC,IACpBC,IAAK5B,EAAU0B,KAAKE,IACpBnB,MAAO,CACLoB,aAAc,MACdnC,MAAO,OACPoC,OAAQ,UAGZ,IAAI,gBAStB,cAAC,UAAe,MAIxB,C","file":"static/js/7.85c4728d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.css';\n\nfunction Header(props) {\n  const { title } = props;\n  return <div className=\"header\">{title}</div>;\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { useEffect, useState, useContext } from 'react';\r\nimport { Chrono } from 'react-chrono';\r\nimport { Container } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport Fade from 'react-reveal';\r\nimport { ThemeContext } from 'styled-components';\r\nimport endpoints from '../constants/endpoints';\r\nimport Header from './Header';\r\nimport FallbackSpinner from './FallbackSpinner';\r\nimport '../css/education.css';\r\n\r\nfunction Education(props) {\r\n  const theme = useContext(ThemeContext);\r\n  const { header } = props;\r\n  const [data, setData] = useState(null);\r\n  const [width, setWidth] = useState('50vw');\r\n  const [mode, setMode] = useState('VERTICAL_ALTERNATING');\r\n\r\n  useEffect(() => {\r\n    fetch(endpoints.education, {\r\n      method: 'GET',\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => setData(res))\r\n      .catch((err) => err);\r\n\r\n    if (window?.innerWidth < 576) {\r\n      setMode('VERTICAL');\r\n    }\r\n\r\n    if (window?.innerWidth < 576) {\r\n      setWidth('90vw');\r\n    } else if (window?.innerWidth >= 576 && window?.innerWidth < 768) {\r\n      setWidth('90vw');\r\n    } else if (window?.innerWidth >= 768 && window?.innerWidth < 1024) {\r\n      setWidth('75vw');\r\n    } else {\r\n      setWidth('50vw');\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header title={header} />\r\n      {data ? (\r\n        <Fade>\r\n          <div className='centered-container'>\r\n            <div style={{ width }} className='section-content-container'>\r\n              <Container>\r\n                <Chrono\r\n                  // hideControls\r\n                  // allowDynamicUpdate\r\n                  useReadMore={false}\r\n                  items={data.education}\r\n                  cardHeight={200}\r\n                  // mode={mode}\r\n                  slideShow\r\n                  slideItemDuration={2000}\r\n                  slideShowType='slide_in'\r\n                  autoPlay\r\n                  theme={{\r\n                    primary: theme.accentColor,\r\n                    secondary: theme.education_card,\r\n                    cardBgColor: theme.chronoTheme.cardBgColor,\r\n                    cardForeColor: theme.chronoTheme.cardForeColor,\r\n                    titleColor: theme.chronoTheme.titleColor,\r\n                  }}\r\n                >\r\n                  <div className='chrono-icons'>\r\n                    {data.education.map((education) =>\r\n                      education.icon ? (\r\n                      \r\n                          <img\r\n                            className='logo-img'\r\n                            src={education.icon.src}\r\n                            alt={education.icon.alt}\r\n                            style={{\r\n                              borderRadius: '50%',\r\n                              width: '40px', // Adjust the width as needed\r\n                              height: '30px', // Adjust the height as needed\r\n                            }}\r\n                          />\r\n                      ) : null,\r\n                    )}\r\n                  </div>\r\n                </Chrono>\r\n              </Container>\r\n            </div>\r\n          </div>\r\n        </Fade>\r\n      ) : (\r\n        <FallbackSpinner />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nEducation.propTypes = {\r\n  header: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Education;\r\n"],"sourceRoot":""}